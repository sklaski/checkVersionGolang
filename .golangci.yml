# Hugo linting rules
linters-settings:
  dupl:
    threshold: 100
  gci:
    local-prefixes: github.com/golangci/golangci-lint
  goconst:
    min-len: 2
    min-occurrences: 2
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
  goimports:
    local-prefixes: github.com/golangci/golangci-lint
  govet:
    check-shadowing: false
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
  maligned:
    suggest-new: true
  misspell:
    locale: US
  nolintlint:
    allow-leading-space: true # don't require machine-readable nolint directives (i.e., with no leading space)
    allow-unused: false # report any unused nolint directives
    require-explanation: false # don't require an explanation for nolint directives
    require-specific: false # don't require nolint directives to be specific about which linter is being skipped
  revive:
    # When set to false, ignores files with "GENERATED" header, similar to golint
    ignore-generated-header: true
    # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md
    rules:
      - name: atomic
        description: Check for commonly mistaken usages of the sync/atomic package
      - name: bare-return
        description: Warns on bare (a.k.a. naked) returns
      - name: blank-imports # recommended by revive project
        description: Blank import should be only in a main or test package, or have a comment justifying it.
      - name: bool-literal-in-expr
        description: 'Using Boolean literals (true, false) in logic expressions may make the code less readable.
          This rule suggests removing Boolean literals from logic expressions.'
      - name: call-to-gc
        description: 'Explicitly invoking the garbage collector is, except for specific uses in benchmarking, very dubious.
          The garbage collector can be configured through environment variables as described https://pkg.go.dev/runtime'
      - name: cognitive-complexity
        description: 'Cognitive complexity is a measure of how hard code is to understand.
          While cyclomatic complexity is good to measure "testability" of the code,
          cognitive complexity aims to provide a more precise measure of the difficulty of understanding the code.
          Enforcing a maximum complexity per function helps to keep code readable and maintainable.'
        arguments: [ 64 ] # (int) the maximum function complexity
      - name: confusing-results
        description: Function or methods that return multiple, no named, values of the same type could induce error.
      - name: constant-logical-expr
        description: The rule spots logical expressions that evaluate always to the same value.
      - name: context-as-argument # recommended by revive project
        description: By convention, context.Context should be the first parameter of a function. This rule spots function declarations that do not follow the convention.
      - name: context-keys-type # recommended by revive project
        description: Basic types should not be used as a key in context.WithValue.
      - name: cyclomatic
        description: Configuration of the `cyclomatic` rule. Here we specify that the rule should fail if it detects code with higher complexity than 10.
        arguments: [ 30 ]
      - name: deep-exit
      - name: defer
        description: 'This rule warns on some common mistakes when using defer statement.
          See https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#defer for more details.'
        # arguments: ["call-chain","loop","method-call","recover","immediate-recover","return"]
      - name: dot-imports # recommended by revive project
        description: Importing with . makes the programs much harder to understand because it is unclear whether names belong to the current package or to an imported package.
      - name: duplicated-imports
        description: It is possible to unintentionally import the same package twice. This rule looks for packages that are imported two or more times.
      - name: early-return
        description: In GO it is idiomatic to minimize nesting statements, a typical example is to avoid if-then-else constructions. This rule spots constructions like
      - name: empty-block # recommended by revive project
        description: Empty blocks make code less readable and could be a symptom of a bug or unfinished refactoring.
      - name: empty-lines
        description: 'Sometimes gofmt is not enough to enforce a common formatting of a code-base;
          this rule warns when there are heading or trailing newlines in code blocks.'
      - name: error-naming # recommended by revive project
        description: By convention, for the sake of readability, variables of type error must be named with the prefix err.
      - name: error-return # recommended by revive project
        description: By convention, for the sake of readability, the errors should be last in the list of returned values by a function.
      - name: error-strings # recommended by revive project
        description: By convention, for better readability, error messages should not be capitalized or end with punctuation or a newline.
      - name: errorf # recommended by revive project
        description: 'It is possible to get a simpler program by replacing errors.New(fmt.Sprintf()) with fmt.Errorf().
          This rule spots that kind of simplification opportunities.'
      - name: exported # recommended by revive project
        description: Exported function and methods should have comments. This warns on undocumented exported functions and methods.
      - name: function-result-limit
        description: Functions returning too many results can be hard to understand/use.
        arguments: [ 4 ] # (int) the maximum allowed return values
      - name: function-length
        description: Functions too long (with many statements and/or lines) can be hard to understand.
        arguments: [ 80, 150 ] # (int,int) the maximum allowed statements and lines. Must be non-negative integers. Set to 0 to disable the check
      - name: get-return
        description: Typically, functions with names prefixed with Get are supposed to return a value.
      - name: identical-branches
        description: an if-then-else conditional with identical implementations in both branches is an error.
      - name: if-return # recommended by revive project
        description: Checking if an error is nil to just after return the error or nil is redundant.
      - name: increment-decrement # recommended by revive project
        description: 'By convention, for better readability, incrementing an integer variable by 1 is recommended to be done using the ++ operator.
          This rule spots expressions like i += 1 and i -= 1 and proposes to change them into i++ and i--.'
      - name: indent-error-flow # recommended by revive project
        description: 'To improve the readability of code, it is recommended to reduce the indentation as much as possible.
           This rule highlights redundant else-blocks that can be eliminated from the code.'
      - name: import-shadowing
        description: 'In GO it is possible to declare identifiers
          (packages, structs, interfaces, parameters, receivers, variables, constants...)
          that conflict with the name of an imported package. This rule spots identifiers that shadow an import.'
      - name: line-length-limit
        arguments: [ 180 ]
      - name: modifies-parameter
        description: 'A function that modifies its parameters can be hard to understand.
          It can also be misleading if the arguments are passed by value by the caller.
          This rule warns when a function modifies one or more of its parameters.'
      - name: modifies-value-receiver
        description: 'A method that modifies its receiver value can have undesired behavior.
          The modification can be also the root of a bug because the actual value receiver could be a copy of that used at the calling site.
          This rule warns when a method modifies its receiver.'
      - name: nested-structs
      - name: optimize-operands-order
        description: 'conditional expressions can be written to take advantage of short circuit evaluation and
          speed up its average evaluation time by forcing the evaluation of less time-consuming terms before more costly ones.
          This rule spots logical expressions where the order of evaluation of terms seems non optimal.
          Please notice that confidence of this rule is low and is up to the user to decide
          if the suggested rewrite of the expression keeps the semantics of the original one.'
      - name: package-comments # recommended by revive project
      - name: range # recommended by revive project
        description: This rule suggests a shorter way of writing ranges that do not use the second value.
      - name: range-val-in-closure
        description: 'Range variables in a loop are reused at each iteration; therefore a goroutine created in a loop
          will point to the range variable with from the upper scope. This way, the goroutine could use the variable with an undesired value.
          This rule warns when a range value (or index) is used inside a closure.'
      - name: range-val-address
        description: 'Range variables in a loop are reused at each iteration.
          This rule warns when assigning the address of the variable, passing the address to append() or using it in a map.'
      - name: receiver-naming # recommended by revive project
        description: 'By convention, receiver names in a method should reflect their identity. For example, if the receiver is of type Parts,
          p is an adequate name for it. Contrary to other languages, it is not idiomatic to name receivers as this or self.'
      - name: redefines-builtin-id # recommended by revive project
        description: 'Constant names like false, true, nil, function names like append, make, and basic type names like bool,
          and byte are not reserved words of the language; therefore the can be redefined.
          Even if possible, redefining these built in names can lead to bugs very difficult to detect.'
      - name: string-of-int
        description: 'explicit type conversion string(i) where i has an integer type other than rune might behave not as
          expected by the developer (e.g. string(42) is not "42"). This rule spot that kind of suspicious conversions.'
      - name: struct-tag
        description: 'Struct tags are not checked at compile time. This rule, checks and warns if it finds errors in
          common struct tags types like: asn1, default, json, protobuf, xml, yaml.'
      - name: superfluous-else # recommended by revive project
        description: 'To improve the readability of code, it is recommended to reduce the indentation as much as possible.
          This rule highlights redundant else-blocks that can be eliminated from the code.'
      - name: time-equal
        description: 'This rule warns when using == and != for equality check time.Time and suggest to time.time.Equal method,
          for about information follow https://pkg.go.dev/time#Time'
      - name: time-naming # recommended by revive project
        description: Using unit-specific suffix like "Secs", "Mins", ... when naming variables of type time.Duration can be misleading, this rule highlights those cases.
      - name: unconditional-recursion
        description: Unconditional recursive calls will produce infinite recursion, thus program stack overflow. This rule detects and warns about unconditional (direct) recursive calls.
      - name: unexported-naming
        description: this rule warns on wrongly named un-exported symbols, i.e. un-exported symbols whose name start with a capital letter.
      - name: unexported-return # recommended by revive project
        description: This rule warns when an exported function or method returns a value of an un-exported type.
      - name: unnecessary-stmt
        description: This rule suggests to remove redundant statements like a break at the end of a case block, for improving the code's readability.
      - name: unreachable-code # recommended by revive project
        description: This rule spots and proposes to remove unreachable code.
      - name: unhandled-error
        arguments: [ "fmt.Printf", "myFunction" ]
      - name: unused-parameter # recommended by revive project
        description: This rule warns on unused parameters. Functions or methods with unused parameters can be a symptom of an unfinished refactoring or a bug.
      - name: unused-receiver
        description: This rule warns on unused method receivers. Methods with unused receivers can be a symptom of an unfinished refactoring or a bug.
      - name: use-any
        description: 'Since GO 1.18, interface{} has an alias: any. This rule proposes to replace instances of interface{} with any.'
      - name: useless-break
        description: 'This rule warns on useless break statements in case clauses of switch and select statements.
          GO, unlike other programming languages like C, only executes statements of the selected case while ignoring the subsequent case clauses.
          Therefore, inserting a break at the end of a case clause has no effect.
          Because break statements are rarely used in case clauses, when switch or select statements are inside a for-loop,
          the programmer might wrongly assume that a break in a case clause will take the control out of the loop.
          The rule emits a specific warning for such cases.'
      - name: var-naming # recommended by revive project
        description: This rule warns when initialism, variable or package naming conventions are not followed.
      #        arguments: [["ID"], ["VM"]] # This rule accepts two slices of strings, a whitelist and a blacklist of initialisms. By default, the rule behaves exactly as the alternative in golint but optionally, you can relax it (see golint/lint/issues/89)
      - name: var-declaration # recommended by revive project
        description: This rule proposes simplifications of variable declarations.
      - name: waitgroup-by-value
        description: 'Function parameters that are passed by value, are in fact a copy of the original argument.
          Passing a copy of a sync.WaitGroup is usually not what the developer wants to do.
          This rule warns when a sync.WaitGroup expected as a by-value parameter in a function or method.'

# mapping to code-climate compliant severity values is required (https://docs.codeclimate.com/docs/issues#issue-severity)
# to enable visualization in gitlab
severity:
  default-severity: minor
  rules:
    - linters:
        - revive
      severity: major

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    - bodyclose
    - depguard
    - dogsled
    - errcheck
    - exportloopref
    - exhaustive
    - goconst
    - gofmt
    - goimports
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - nakedret
    - noctx
    - nolintlint
    - revive
    - rowserrcheck
    - staticcheck
    - stylecheck
    - typecheck
    - unconvert
    - whitespace

output:
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: true

  # add a prefix to the output file references; default is no prefix
  path-prefix: ""

  # sorts results by: filepath, line and column
  sort-results: true

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - path: _test\.go
      linters:
        - gomnd

    # https://github.com/go-critic/go-critic/issues/926
    - linters:
        - gocritic
      text: "unnecessaryDefer:"

run:
  skip-dirs:
    - swagger
  build-tags:
    - integration
